plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id "kotlin-kapt"
    id 'dagger.hilt.android.plugin'
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {

    packagingOptions {
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
    }

    signingConfigs {
        debug {
            storeFile file(properties['store_file'])
            keyAlias properties['key_alias']
            keyPassword properties['key_password']
            storePassword properties['store_password']
        }

        release {
            storeFile file(properties['store_file'])
            keyAlias properties['key_alias']
            keyPassword properties['key_password']
            storePassword properties['store_password']
        }
    }
    namespace 'com.qure.fishingmemory'
    compileSdk 33

    defaultConfig {
        applicationId "com.qure.fishingmemory"
        minSdk 27
        targetSdk 33
        versionCode 3
        versionName "1.0.2"


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            manifestPlaceholders = [
                    KAKAO_API_KEY: properties.getProperty('kakao_api_key'),
                    NAVER_MAP_API_CLIENT_ID: properties.getProperty('naver_map_api_client_id'),
                    KAKAO_NATIVE_APP_KEY: properties.getProperty('kakao_native_app_key')
            ]

            buildConfigField 'String', 'KAKAO_API_KEY', "\"${properties.getProperty('kakao_api_key')}\""
            buildConfigField 'String', 'KAKAO_NATIVE_APP_KEY', "\"${properties.getProperty('kakao_native_app_key')}\""
            buildConfigField 'String', 'FIREBASE_API_KEY', "\"${properties.getProperty('firebase_api_key')}\""
            buildConfigField 'String', 'FIREBASE_DATABASE_URL', "\"${properties.getProperty('firebase_database_url')}\""
            buildConfigField 'String', 'FIREBASE_STORAGE_URL', "\"${properties.getProperty('firebase_storage_url')}\""
            buildConfigField 'String', 'FIREBASE_DATABASE_PROJECT_ID', "\"${properties.getProperty('firebase_database_project_id')}\""
            buildConfigField 'String', 'WEATHER_API_KEY', "\"${properties.getProperty('weather_api_key')}\""
            buildConfigField 'String', 'WEATHER_DATABASE_URL', "\"${properties.getProperty('weather_database_url')}\""
            buildConfigField 'String', 'NAVER_MAP_BASE_URL', "\"${properties.getProperty('naver_map_base_url')}\""
            buildConfigField 'String', 'NAVER_MAP_API_CLIENT_ID', "\"${properties.getProperty('naver_map_api_client_id')}\""
            buildConfigField 'String', 'NAVER_MAP_API_CLIENT_SECRET', "\"${properties.getProperty('naver_map_api_client_secret')}\""
        }
        debug {
            applicationIdSuffix ".app"

            manifestPlaceholders = [
                    KAKAO_API_KEY: properties.getProperty('kakao_api_key'),
                    NAVER_MAP_API_CLIENT_ID: properties.getProperty('naver_map_api_client_id'),
                    KAKAO_NATIVE_APP_KEY: properties.getProperty('kakao_native_app_key')
            ]

            buildConfigField 'String', 'KAKAO_API_KEY', "\"${properties.getProperty('kakao_api_key')}\""
            buildConfigField 'String', 'KAKAO_NATIVE_APP_KEY', "\"${properties.getProperty('kakao_native_app_key')}\""
            buildConfigField 'String', 'FIREBASE_API_KEY', "\"${properties.getProperty('firebase_api_key')}\""
            buildConfigField 'String', 'FIREBASE_DATABASE_URL', "\"${properties.getProperty('firebase_database_url')}\""
            buildConfigField 'String', 'FIREBASE_STORAGE_URL', "\"${properties.getProperty('firebase_storage_url')}\""
            buildConfigField 'String', 'FIREBASE_DATABASE_PROJECT_ID', "\"${properties.getProperty('firebase_database_project_id')}\""
            buildConfigField 'String', 'WEATHER_API_KEY', "\"${properties.getProperty('weather_api_key')}\""
            buildConfigField 'String', 'WEATHER_DATABASE_URL', "\"${properties.getProperty('weather_database_url')}\""
            buildConfigField 'String', 'NAVER_MAP_BASE_URL', "\"${properties.getProperty('naver_map_base_url')}\""
            buildConfigField 'String', 'NAVER_MAP_API_CLIENT_ID', "\"${properties.getProperty('naver_map_api_client_id')}\""
            buildConfigField 'String', 'NAVER_MAP_API_CLIENT_SECRET', "\"${properties.getProperty('naver_map_api_client_secret')}\""

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        dataBinding true
    }
    lintOptions{
        checkReleaseBuilds false
        abortOnError false
    }
}

configurations {
    ktlint
    detekt
}


dependencies {
    ktlint("com.pinterest:ktlint:0.47.0") {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
        }
    }
    detekt 'io.gitlab.arturbosch.detekt:detekt-cli:1.23.0'

    implementation project(path: ':build-property')
    implementation project(path: ':domain')
    implementation project(path: ':data')
    implementation project(path: ':navigator')
    implementation project(path: ':presentation:splash')
    implementation project(path: ':presentation:onboarding')
    implementation project(path: ':presentation:login')
    implementation project(path: ':presentation:home')
    implementation project(path: ':presentation:history')
    implementation project(path: ':presentation:create')
    implementation project(path: ':presentation:memo')
    implementation project(path: ':presentation:map')
    implementation project(path: ':presentation:fishingspot')
    implementation project(path: ':presentation:program_information')
    implementation project(path: ':presentation:mypage')
    implementation project(path: ':presentation:gallery')
    implementation project(path: ':presentation:permission')


    implementation(jetpackDeps)
    implementation(coroutines)

    implementation deps.hilt.core
    kapt deps.hilt.compiler

    implementation(splashDeps)
    implementation(lottieDeps)

    implementation deps.timber

    implementation(kakaoDeps)

    implementation platform(deps.firebase.bom)

    implementation deps.firebase.analytics
    implementation deps.firebase.auth

    implementation(locationDeps)

    implementation deps.navermap

    testImplementation(testDeps)
    androidTestImplementation(androidTestDeps)
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    mainClass.set("com.pinterest.ktlint.Main")
    args "src/**/*.kt"
    // see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    mainClass.set("com.pinterest.ktlint.Main")
    args "-F", "src/**/*.kt"
    // see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information
}

task detekt(type: JavaExec) {
    main = "io.gitlab.arturbosch.detekt.cli.Main"
    classpath = configurations.detekt

    def input = "$projectDir"
    def exclude = ".*/build/.*,.*/resources/.*"
    def params = [ '-i', input, '-ex', exclude]

    args(params)
}

check.dependsOn detekt
